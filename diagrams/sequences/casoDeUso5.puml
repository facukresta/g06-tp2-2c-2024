@startuml casoDeUso5
title "test05 Un Comodin Con Combinacion De Efectos Bonus"

participant "TestCase" as TestCase

activate TestCase

TestCase -> "c:Comodin" as comodin **: new SumaPuntos(13, new Par(), probabilidad)

activate comodin
comodin -> "a:Aleatorio" as aleatorio **: new Aleatorio(probabilidad)
activate aleatorio
comodin <-- aleatorio
deactivate aleatorio
comodin -> "par:Par" as par ** : new Par()
activate par
comodin <-- par
deactivate par
TestCase <-- comodin : c
deactivate comodin

TestCase -> "esperado1:Puntaje" as esperado1 **: new Puntaje(24,2)
activate esperado1
TestCase <-- esperado1 : esperado1
deactivate esperado1


TestCase -> "esperado2:Puntaje" as esperado2 **: new Puntaje(37,2)
activate esperado2
TestCase <-- esperado2 : esperado2
deactivate esperado2

TestCase -> "mano:Mano" as mano **: new Mano(8)
activate mano
TestCase <-- mano : mano
note right of TestCase: creamos 2 cartas que forman un par
TestCase -> mano : agregarCartas(cartas)
deactivate mano

TestCase -> "comodinera:Comodinera" as comodinera **: new()
activate comodinera
TestCase -> comodinera : agregarComodin(c)
deactivate comodinera


TestCase -> "Juego" as juego : chequearJuego(cartas)
activate juego
loop para cada juego en juegos
juego -> "juegos:List" as juegos : colocarCartas(cartas)
juego -> juegos: obtenerMayor()
end
TestCase <- juego : juego = new Par()
deactivate juego


TestCase -> mano : jugarMano(cartas, juego, comodinera)
activate mano
mano -> "juego:Par" as mejor:  puntuarMano()

activate mejor
mano <-- mejor : obtenido1:Puntaje
deactivate mejor
mano -> comodinera : aplicarComodines(obtenido1, juego)
loop para cada comodin
comodinera -> "Comodin" : aplicarModificador(obtenido1, juego)
end
TestCase <-- mano : obtenido1:Puntaje
deactivate mano

TestCase -> mano : jugarMano(cartas, juego, comodinera)
activate mano
mano -> "juego:Par" as mejor:  puntuarMano()

activate mejor
mano <-- mejor : obtenido2:Puntaje
deactivate mejor
mano -> comodinera : aplicarComodines(obtenido2, juego)
loop para cada comodin
comodinera -> "Comodin" : aplicarModificador(obtenido2, juego)
end
TestCase <-- mano : obtenido2:Puntaje
deactivate mano

TestCase -> esperado1 : tenesMismoPuntaje(obtenido1)
activate esperado1
TestCase <-- esperado1 : true
deactivate esperado1

TestCase -> esperado2 : tenesMismoPuntaje(obtenido2)
activate esperado2
TestCase <-- esperado2 : true
deactivate esperado2

deactivate TestCase

@enduml