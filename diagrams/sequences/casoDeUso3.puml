@startuml casoDeUso3
title "test03 El Jugador Si Posee Un Comodin Que Suma 10 Puntos Por Descarte Al Descartar Sume La Cantidad Correcta"

participant "TestCase" as TestCase

activate TestCase

TestCase -> "esperado:Puntaje" as esperado **: new Puntaje(10,1)
activate esperado
TestCase <-- esperado : esperado
deactivate esperado

TestCase -> "c:Comodin" as comodin **: new SumaPuntosDescarte(10)

activate comodin
comodin -> "a:Aleatorio" as aleatorio **: new Aleatorio(1)
activate aleatorio
comodin <-- aleatorio
deactivate aleatorio
comodin -> "escalera:Escalera" as escalera ** : new Escalera()
activate escalera
comodin <-- escalera
deactivate escalera
TestCase <-- comodin : c
deactivate comodin

TestCase -> "mano:Mano" as mano **: new Mano(8)
activate mano
TestCase <-- mano : mano
note right of TestCase: creamos 5 cartas que forman una escalera
TestCase -> mano : agregarCartas(cartas)
deactivate mano

TestCase -> "Juego" as juego : chequearJuego(cartas)
activate juego

loop para cada juego en juegos
juego -> "juegos:List" as juegos : colocarCartas(cartas)
juego -> juegos: obtenerMayor()
end

TestCase <- juego : juegoMayorPuntaje = new Escalera()
deactivate juego

TestCase -> "comodinera:Comodinera" as comodinera **: new()
activate comodinera
TestCase -> comodinera : agregarComodin(c)
deactivate comodinera


TestCase -> mano : descartarMano(cartas, juegoMayorPuntaje, comodinera)
activate mano
mano -> "juegoMayorPuntaje:Escalera" as mejor : puntuarMano()
activate mejor
mano <-- mejor : resultado:Puntaje
deactivate mejor

mano -> comodinera : aplicarComodines(resultado, juegoMayorPuntaje)
loop para cada comodin
comodinera -> "Comodin" : aplicarModificador(resultado, juegoMayorPuntaje)
end
TestCase <-- mano : resultado:Puntaje
deactivate mano


TestCase -> esperado : tenesMismoPuntaje(resultado)
activate esperado
TestCase <-- esperado : true
deactivate esperado

deactivate TestCase
@enduml