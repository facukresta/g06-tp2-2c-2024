@startuml casoDeUso4
title "test04 El Jugador Con Un Comodin Con Chances De Aplicar Un Modificador De 1 Sobre 1000 Con Efecto De Suma De Multiplicador Aplica Ese Efecto Cuando Las Probabilidades Estan Dadas"
!pragma teoz true

participant "TestCase" as TestCase

activate TestCase

TestCase -> "c:Comodin" as comodin **: new SumaMultiplicador(13, new Aleatorio(1000))

activate comodin
comodin -> "sinJuego:SinJuego" as sinJuego ** : new SinJuego()
activate sinJuego
comodin <-- sinJuego
deactivate sinJuego
TestCase <-- comodin : c
deactivate comodin

TestCase -> "mano:Mano" as mano **: new Mano(8)
activate mano
TestCase <-- mano : mano
deactivate mano

carta1 -[hidden]-> "__:Carta__" as instanciaCarta **: blank
& TestCase -> "carta1:Carta" as carta1 **: new Carta(7, new Trebol())
activate carta1
carta1 -> "__:Trebol__" as trebol **: new Trebol()
activate trebol
carta1 <-- trebol : Trebol
deactivate trebol
carta1 -> "__:SinTarot__" as sinTarot **: new SinTarot()
activate sinTarot
carta1 <-- sinTarot : SinTarot
deactivate sinTarot
TestCase <-- carta1 : carta1
deactivate carta1

TestCase -> "carta2:Carta" as carta2 **: new Carta(7, new Corazon())
activate carta2
carta2 -> "__:Corazon__" as corazon **: new Coranzon()
activate corazon
carta2 <-- corazon: Corazon
deactivate corazon
carta2 -> sinTarot : new SinTarot()
activate sinTarot
carta2 <-- sinTarot : SinTarot
deactivate sinTarot
TestCase <-- carta2 : carta2
deactivate carta2

TestCase -> mano : agregarCarta(carta1)
activate mano
deactivate mano

TestCase -> mano : agregarCarta(carta2)
activate mano
deactivate mano


TestCase -> mano : elegirCarta(carta1)
activate mano
mano -> mano : obtenerCarta(carta)
activate mano
loop por cada carta en mano hasta encontrar la carta buscada
mano -> "__:Carta__" as instanciaCarta : sos(carta)
activate instanciaCarta
instanciaCarta --> mano : true
deactivate instanciaCarta
end
mano <-- mano : carta
deactivate mano
mano -> "__:Juego__" as juego **: chequearJuego(cartasSeleccionadas)
activate juego
loop por cada juego de cartas posible dentro de Balastro
juego -> "juegos:List<Juego>" as juegos : sosJuego(cartasSeleccionadas)
activate juegos
juegos --> juego : true
juego -> juegos : puntuarMano(cartasSeleccionadas)
juego <-- juegos : puntajeJuegoSeleccionado
deactivate juegos
juego -> juego : esMayor(puntajeJuegoSeleccionado)

activate juego
deactivate juego
end
mano <-- juego : juegoSelecconado
deactivate instanciaCarta
deactivate juego
deactivate mano

TestCase -> mano : agregarComodin(c)
activate mano
deactivate mano

TestCase -> "esperado:Puntaje" as esperado **: new Puntaje(12,13)
activate esperado
TestCase <-- esperado : esperado
deactivate esperado

TestCase -> "obtenido:Puntaje" as obtenido **: <<crear>>

TestCase -> mano : jugarMano()
activate mano 
mano -> juego : puntuarMano(cartasSeleccionadas)
activate juego
loop para cada carta
juego -> instanciaCarta : obtenerPuntaje()
juego <--instanciaCarta : puntajeDeLaCarta
end
mano <-- juego : puntajeTotal
deactivate juego
mano -> comodin : aplicarModificador(puntaje, juego)
activate comodin
comodin --> mano : puntajeModificado
deactivate comodin
mano -> mano : descartarMano()
obtenido <-- mano : puntaje
activate obtenido
deactivate obtenido
deactivate mano


obtenido <- TestCase : tenesMismoPuntaje(esperado)
activate obtenido
obtenido -> obtenido : calcularPuntaje()
 & obtenido -> esperado : calcularPuntaje()
activate esperado
esperado --> obtenido : puntos * multiplicador
deactivate esperado
obtenido --> TestCase: true
deactivate obtenido

deactivate TestCase

@enduml