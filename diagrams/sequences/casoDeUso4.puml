@startuml casoDeUso4
title "test04 El Jugador Con Un Comodin Con Chances De Aplicar Un Modificador De 1 Sobre 1000 Con Efecto De Suma De Multiplicador Aplica Ese Efecto Cuando Las Probabilidades Estan Dadas"
!pragma teoz true

participant "TestCase" as TestCase

activate TestCase

TestCase -> "c:SumaMultiplicador" as comodin **: new SumaMultiplicador(13, 1000, "")

activate comodin
comodin -> "a:Aleatorio" as aleatorio **: new Aleatorio(1000)
activate aleatorio
comodin <-- aleatorio
deactivate aleatorio
comodin -> "sinJuego:sinJuego" as sinJuego ** : new SinJuego()
activate sinJuego
comodin <-- sinJuego
deactivate sinJuego
TestCase <-- comodin : c
deactivate comodin


TestCase -> "mano:ManoDe8" as mano **: new ManoDe8()
activate mano
TestCase <-- mano : mano
deactivate mano
note right of TestCase: creamos 2 cartas y las guardamos la lista "cartas"
TestCase -> mano : agregarCartas(cartas)


TestCase -> "sel:Saleccionadas" as sel ** : new SeleccionadasBalatro()
activate sel
TestCase <-- sel :sel
deactivate sel
TestCase -> sel : seleccionarCarta(carta1)

TestCase -> "comodinera:Comodinera" as comodinera **: new Comodinera()
activate comodinera

loop para 5 comodines
comodinera -> comodinera  :agregarComodin(new SinComodin())
end
TestCase <-- comodinera :comodinera
deactivate comodinera
TestCase -> comodinera : agregarComodin(c)

TestCase -> "esperado1:Puntaje" as esperado1 **: new Puntaje(12,1)
activate esperado1
TestCase <-- esperado1 : esperado1
deactivate esperado1

TestCase -> "esperado2:Puntaje" as esperado2 **: new Puntaje(12,13)
activate esperado2
TestCase <-- esperado2 : esperado2
deactivate esperado2

note right of TestCase: Este primer caso prueba que la probabilidad se cumple
TestCase -> mano : jugarMano(sel, comodinera)
activate mano
mano -> sel : obtenerJuego()
activate sel
sel -> "Juego" : chequearJuego(sel)
activate Juego

loop para cada juego
Juego -> juegoActual : colocarCartas(sel)
activate juegoActual
Juego -> juegoActual : obtenerMayor()
Juego <-- juegoActual : JuegoMayorPuntaje
deactivate juegoActual
end

sel <-- Juego : JuegoMayorPuntaje
deactivate Juego

mano <-- sel : JuegoMayorPuntaje
deactivate sel

mano -> ":Juego" as escalera : obtenerPuntaje()
activate escalera
escalera -> ":Tarot" as tarot :obtenerPuntaje(puntajeDelJuego)
activate tarot
escalera <-- tarot :puntajeModificado
deactivate tarot
loop para cada carta en el juego
escalera -> ":Carta" as carta :obtenerPuntaje()
activate carta
carta -> tarot :obtenerPuntaje(puntajeBaseDeLaCarta)
activate tarot
carta <-- tarot :puntajeDeLaCartaModificado
deactivate
escalera <-- carta: puntajeDeLaCarta
deactivate carta
end
mano <-- escalera : resultado:Puntaje
deactivate escalera

mano -> comodinera : aplicarComodines(resultado, juegoMayorPuntaje)
activate comodinera
loop para cada comodin
comodinera -> ":Comodin" as comodin3 : aplicarModificador(resultado, juegoMayorPuntaje)
deactivate comodinera
activate comodin3
comodin3 -> ":Aleatorio" as ejecucion : ejecuta(puntaje.sumar(new Puntaje(3, valor))
deactivate comodin3
end

mano -> sel: vaciarCartas()

TestCase <-- mano : resultado1:Puntaje
deactivate mano

TestCase -> sel : seleccionarCartas(carta2)

note right of TestCase: Este caso prueba que la probabilidad no se cumple
TestCase -> mano : jugarMano(sel, comodinera)
activate mano
mano -> sel : obtenerJuego()
activate sel
sel -> "Juego" : chequearJuego(sel)
activate Juego

loop para cada juego
Juego -> juegoActual : colocarCartas(sel)
activate juegoActual
Juego -> juegoActual : obtenerMayor()
Juego <-- juegoActual : JuegoMayorPuntaje
deactivate juegoActual
end

sel <-- Juego : JuegoMayorPuntaje
deactivate Juego

mano <-- sel : JuegoMayorPuntaje
deactivate sel

mano -> escalera: obtenerPuntaje()
activate escalera
escalera -> ":Tarot" as tarot :obtenerPuntaje(puntajeDelJuego)
activate tarot
escalera <-- tarot :puntajeModificado
deactivate tarot
loop para cada carta en el juego
escalera -> ":Carta" as carta :obtenerPuntaje()
activate carta
carta -> tarot :obtenerPuntaje(puntajeBaseDeLaCarta)
activate tarot
carta <-- tarot :puntajeDeLaCartaModificado
deactivate
escalera <-- carta: puntajeDeLaCarta
deactivate carta
end
mano <-- escalera : resultado:Puntaje
deactivate escalera

mano -> comodinera : aplicarComodines(resultado, juegoMayorPuntaje)
activate comodinera
loop para cada comodin
comodinera -> ":Comodin" as comodin3 : aplicarModificador(resultado, juegoMayorPuntaje)
deactivate comodinera
activate comodin3
comodin3 -> ":Aleatorio" as ejecucion : ejecuta(puntaje.sumar(new Puntaje(3, valor))
deactivate comodin3
end

mano -> sel: vaciarCartas()

TestCase <-- mano : resultado2:Puntaje
deactivate mano

TestCase -> esperado1 : tenesMismoPuntaje(resultado1)
activate esperado1
TestCase <-- esperado1 : true
deactivate esperado1

TestCase -> esperado2 : tenesMismoPuntaje(resultado2)
activate esperado2
TestCase <-- esperado2 : true
deactivate esperado2

deactivate TestCase

@enduml